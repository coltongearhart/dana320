[
  {
    "objectID": "hw-r-interactive-plots.html#overview",
    "href": "hw-r-interactive-plots.html#overview",
    "title": "\n36  HW – Interactive Plots\n",
    "section": "\n36.1 Overview",
    "text": "36.1 Overview\nThese problems apply the idea from the notes ‘3.5 – Interactive Plots’, where we learned how to create interactive plots in R using plotly.\nThis assignment will visualize some important aspects of NFL players, including physical attributes, positional information / attributes and salary. We will be using a dataset of Madden 23 player info. A subset of the madden-23.csv data is shown below:",
    "crumbs": [
      "R",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>HW -- Interactive Plots</span>"
    ]
  },
  {
    "objectID": "hw-r-interactive-plots.html#assignment",
    "href": "hw-r-interactive-plots.html#assignment",
    "title": "\n36  HW – Interactive Plots\n",
    "section": "\n36.2 Assignment",
    "text": "36.2 Assignment\nThe goal is to recreate some interactive plots with minimal guideance and some plots of your creation in order to understand the structure of plotly function calls. It is designed to be open ended so you can explore a variety of different plot types and interactive plot techniques.\n\n36.2.1 Part a – Scatterplot\nStart with a scatterplot visualizing the relationship between overall_rating and totalSalary. Modify your plot to create a final visualization that considers the following:\n\nMust be interactive.\nMust take into account overplotting, either by changing the plot type or utilizing additional aesthetics.\nDepending on your implementation of above, can you add additional mouse-over text to add to the plot?\n\nOPTIONAL CHALLENGE:\n\n\nUse slice_max() to look at the top 500 players according to overall_rating and recreate the following scatterplot / data table setup that can be used during EDA to identify outlying data points.\n\nTry lasso-selecting a few points and seeing the results in the table!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n36.2.2 Part b – Dumbell chart\nRecreate the following dumbell chart to the best of your ability. Features of this plot:\n\nData needs to be pre-summarized to get the average totalSalary and signingBonus by Position. Calculate the number of players included in each average calculation as well.\nSorted by increasing average totalSalary. HINT: This requires a mutate() statement, not an arrange() statement.\n\nFor each position, the dark green plots the average totalSalary and light green adds the average signingBonus. Thus we can interpret the ending value as the average total money earned during the first year of the contract.\nWell formatted mouse-over interactivity features. HINT: Use html formatting and scales::comma().\n\n\nTry to get your plot as close as you can to this plot (with a reasonable amount of effort :)\n\n\n\n\n\n\n\n36.2.3 Part c – Visualize data\nCreate a mimimum of one additional interactive plot using plot_ly() (not ggplotly()). It can be as simple or complex as you would like. Create additional plots and find a narrative if you wish! Include a short write-up explaining your visual.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>HW -- Interactive Plots</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DANA 320 –Data Visualization",
    "section": "",
    "text": "Overview",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#content",
    "href": "index.html#content",
    "title": "DANA 320 –Data Visualization",
    "section": "Content",
    "text": "Content",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#concurrent-readings",
    "href": "index.html#concurrent-readings",
    "title": "DANA 320 –Data Visualization",
    "section": "Concurrent Readings",
    "text": "Concurrent Readings",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#source",
    "href": "index.html#source",
    "title": "DANA 320 –Data Visualization",
    "section": "Source",
    "text": "Source\n\n\n\n\n\n\nQuarto blog publish details\n\n\n\nThis book was created using Quarto and published with Github Pages.\n\n\n\n\n\n\n\n\nGithub repository for code\n\n\n\nYou can find the code to reproduce this project at coltongearhart/dana320.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "hw-r-visualizations.html#overview",
    "href": "hw-r-visualizations.html#overview",
    "title": "\n29  HW - Visualizations\n",
    "section": "\n29.1 Overview",
    "text": "29.1 Overview\nThese problems apply the idea from the notes ‘3.2 – Visualizations’, where we learned how to create plots using in R using ggplot2.\nWe will be working with the ggplot2::msleep data (documentation), which contains information on mammals sleep patterns as well as some categorical variables about the species. A subset is shown below:",
    "crumbs": [
      "R",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>HW - Visualizations</span>"
    ]
  },
  {
    "objectID": "hw-r-visualizations.html#assignment",
    "href": "hw-r-visualizations.html#assignment",
    "title": "\n29  HW - Visualizations\n",
    "section": "\n29.2 Assignment",
    "text": "29.2 Assignment\nThe goal is to recreate several plots in order to get used to the different types of and the structure of ggplot2 function calls and how to customize plots. The following prompts will take you through a series of plots representing an exploratory data analysis (EDA) where each plot is sequentially updated to new plot types or to incorporate more variables, each time revealing more information.\n\n29.2.1 Part a – Bar graphs\nLets first investigate the sample sizes of different categories within the dataset. Recreate the following bar graph for type of vore.\nNote this used the ggplot2::theme_bw() theme. To run a single command and set the theme for all the subsequent created plots, use ggplot2::theme_set() (check the documentation for more details).\n\n\n\n\n\n\n\n\n\n\nTo make this plot more readable, a first step we could do is sort the bars according to decreasing frequency (when we do this, it is technically called a “Pareto chart”). To do so, replace vore with the following line of code in your aes() statement: fct_infreq(vore). Check the help documentation of forcats::fct_infreq() to see what this function does.\n\n\n\n\n\n\n\n\n\n\nWe can also add the counts atop the bars just like adding data labels in Excel. To do this, add the following lines of code to the previous plot.\n\n&lt; previous bar graph function call &gt; +\n  geom_text(stat = \"count\",\n            aes(x = vore,\n                label = after_stat(count)),\n            vjust = -1)\n\nExplanation of code:\n- geom_text(stat = \"count\", aes(x = vore, label = after_stat(count))) counts the number of observations at each x vore value and uses the count as a label.\n- Then it places the text label by default at the top of each bar, and vjust = -1 moves the label one above the bar.\nBe sure to add nicer labels and title.\n\n29.2.2 Part b – Histograms and density curves\nRecreate the following histogram of sleep_total, paying attention to the changed aesthetics of the histogram.\n\n\n\n\n\n\n\n\n\n\nNotice that this histogram by default is really choppy, lets change the bins argument to a smaller value to see how it looks. Try a few different values.\nPerhaps a smooth curve would be a more accurate representation of this data than a histogram. Recreate the following density curve.\n\n\n\n\n\n\n\n\n\n\nLets add grouping information to the previous histogram to visualize sleep_total for each different type of vore. To do so, use the fill = vore to the aes() statement.\n\n\n\n\n\n\n\n\n\n\nIt is nearly impossible to glean any information from this plot. So let’s switch to a density curve, which is better for displaying several distributions on the same plot. Recreate the following plot, pay attention to which aesthetic vore needs to be mapped to.\n\n\n\n\n\n\n\n\n\n\nNow that we have a readable, accurate plot type for several distributions. Lets investigate more interesting quantities. Suppose we are interested in which animals have the biggest brains (proportionally). To study this we will visualize the ratio of brain weight to body weight based on the classification of animal vore. Recreate the following plot.\nHINTS:\n- Remember we can do “algebra” with our variables within an aes() statement.\n- To remove the NA category, we need to filter them out of the dataset used by ggplot(). We will learn how this function works in more detail next section, but for now replace msleep with the following code: filter(msleep, !is.na(vore)).\n- Essentially, is.na(vore) evaluates to TRUE when there is a missing value of NA and FALSE when not missing, then ! flips the logical so that filter() keeps only the non-missing values.\n\n\n\n\n\n\n\n\n\n\nBe sure to add descriptive title and axis label. Write a sentence in your qmd file summarizing the relationships shown in the resulting plot.\n\n29.2.3 Part c – Comparative boxplots\nAn alternative to multiple density curves is comparative boxplots. Create horizontal comparative boxplots for sleep_total by vore.\nNow convert this to a vertical comparative boxplots. Note that there are two ways this can be done. Be sure to add nice title and axis labels and change the overall color scheme of the boxplots to match the context of sleep. Write a sentence comparing the sleep totals for the different kind of vores.\n\n29.2.4 Part d – Scatterplots\nNow we will visualize two quantitative variables. Recreate the following scatterplot, which investigates the hours of rem sleep compared to the total sleep hours.\n\n\n\n\n\n\n\n\n\n\nThere appears to some kind of relationship between these two variables, which makes sense. The more total sleep an animal gets, the more REM sleep. Lets model the relationship with a regression line. We can do this via the adding the following code to the previous plot.\n\n&lt; previous scatterplot function call &gt; +\n  geom_smooth(aes(x = sleep_total,\n                  y = sleep_rem),\n              method = \"lm\",\n              se = FALSE)\n\nTry commenting out method = \"lm\" to see the effect. Then change se = TRUE.\nBe sure to add nice titles and axis labels.\nIs it correct to model this relationship? REM sleep in hours per day is obviously a function of the sleep total; so there will implicitly be a relationship between these variables. To account for this, lets convert REM sleep to be relative to the total sleep hours by taking the ratio again like with brain weight and body weight. Create a new scatterplot with straight trend line for total sleep vs the ratio of REM sleep to total sleep.\nWrite a sentence describing the relationship between relative REM sleep and the total amount of sleep based on the this and the previous plot.\n\n29.2.5 Part e – Visualize data\nCreate at least one additional polished plot visualizing relationships among variable(s). Include a sentence write-up detailing any conclusions drawn from the plot. Feel free to create more than one :)",
    "crumbs": [
      "R",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>HW - Visualizations</span>"
    ]
  },
  {
    "objectID": "hw-r-data-manipulations.html#overview",
    "href": "hw-r-data-manipulations.html#overview",
    "title": "\n34  HW - Data Manipulations\n",
    "section": "\n34.1 Overview",
    "text": "34.1 Overview\nThis problem ties together concepts and functions from all the previous R notes for a comprehensive data analysis problem.\nWe will be working with hypothetical student grade data data-grades.csv, which contains information on two test scores from students of multiple sections for a single professor, and enrollment data data-majors.csv, which has the students major.\n\n\n\n\n ID \n    Student \n    Test_1 \n    Test_2 \n  \n\n\n 1381 \n    LZ-1 \n    20 \n    55 \n  \n\n 2027 \n    KO-1 \n    30 \n    40 \n  \n\n 6077 \n    DD-1 \n    28 \n    68 \n  \n\n 6869 \n    IG-2 \n    14 \n    42 \n  \n\n 4171 \n    VS-1 \n    28 \n    50 \n  \n\n\n\n\n\n\n ID \n    Major \n  \n\n\n 9810 \n    Physics \n  \n\n 9718 \n    Physics \n  \n\n 9685 \n    Chemisty \n  \n\n 9618 \n    Chemisty \n  \n\n 9520 \n    Physics \n  \n\n\n\n\nTo read in the data, first download it from Canvas and then change the path in the read_csv() statement above to where you have saved the data relative to the location of the your homework file.\nThis assignment will take you through steps to clean, organize and analyze these the test scores.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>HW - Data Manipulations</span>"
    ]
  },
  {
    "objectID": "hw-r-data-manipulations.html#assignment",
    "href": "hw-r-data-manipulations.html#assignment",
    "title": "\n34  HW - Data Manipulations\n",
    "section": "\n34.2 Assignment",
    "text": "34.2 Assignment\nThe goal of this assignment is to demonstrate common data manipulation tasks using packages from the tidyverse.\n\n34.2.1 Part a – Data manipulations\nThe goal is to have a single dataset with the following columns:\n\nID\n\nStudent: just two initials\nMajor\n\nClass: 1 or 2\n\nTest_1: % out of 100\n\nTest_2: % out of 100\n\n\nFor the grades data, we need to split the current student column into two variables, one of their initials and one for the class they are in. Use tidyr::separate_wider_delim() to do so.\nConvert the test scores to percentages (Test 1 is out of 30 points and Test 2 is out of 70 points).\nCombine grades data and majors data and then sort alphabetically by student initials within each class.\n\n34.2.2 Part b – Visualize data\nNow that the data is cleaned and organized, lets visualize the Test 1 scores to start with.\nCreate two polished plots to visualize Test 1 scores, at least one of which should include a class comparison or major comparison.\n\n34.2.3 Part c – Summarize data\nNow that we have an idea of the distributions for Test 1, let’s summarize them, specifically we want to create an overall summary and a summary by class.\n\nCreate a test 1 dataset that contains only the Class, Student initials and Test 1 score.\nCreate an object named data_summary_overall that summarizes Test 1 scores with the sample size, average and standard deviation. Then add the following lines of code to add an indicator column and rearrange the columns.\n\n\ndata_summary_overall &lt;- &lt; previous summary function call &gt; %&gt;% \n  mutate(Class = \"Overall\") %&gt;% \n  select(4, 1:3)\n\n\nCreate another object called data_summary_section that performs the same summary functions the previous step, except by Class.\nCombine the overall summary with the class summary rowwise.\n\n34.2.4 Part d – More manipulations and visualizations 1\nIf we want to visualize both tests and class at the same time, some more data restructuring is necessary. Specifically, we need the data to have the following columns:\n\nID\n\nStudent: just two initials\nMajor\n\nClass: 1 or 2\n\nTest: 1 or 2\n\nGrade: % out of 100\n\nThus, there is two rows per student, one for each test grade.\nPerform the necessary data steps and then recreate the following visual. Note that two have the labels for Test 1 and Test 2 nicely formatted, the values need to be cleaned in the data.\n\n\n\n\n\n\n\n\n\n\n\n34.2.5 Part e – More manipulations and visualizations 2\nNow the professor wants to investigate applying a curve by major for Test 1 grades.\n\nUsing the Test 1 data from Part c, create a new dataset that also contains curved grades for Test 1 according to the following scheme:\n\n\nClass 1 receives 3 additional points.\nClass 2 receives a 30% of their missed points back (HINT: On paper work out an algebra function that accomplishes this and spot check a few values to make sure they are correct).\n\nHINT: Use case_when().\n\nUsing the curved data, perform the necessary data steps and then recreate the following visual.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>HW - Data Manipulations</span>"
    ]
  }
]