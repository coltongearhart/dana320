---
title: "3.4 HW -- Data Manipulations"
format:
  html:
    #output-file: "3.4 HW - Data Manipulations.html"
    #output-file: "3.4 HW - Data Manipulations SOLUTION.html"
    embed-resources: true
    toc: true
    toc-location: left
    df-print: kable
execute: 
  warning: false
  message: false
---

Submission: Completed qmd file and rendered html file via Canvas.

What will be looked at for grading: Correct code, output and sufficient write-ups where indicated.

## Overview

This problem ties together concepts and functions from all the previous R notes for a comprehensive data analysis problem.

We will be working with hypothetical student grade data `data-grades.csv`, which contains information on two test scores from students of multiple sections for a single professor, and enrollment data `data-majors.csv`, which has the students major.

```{r}
#| label: setup
#| echo: false

# load packages
library(tidyverse)
library(magrittr)
library(kableExtra)

# set parameter for solutions
solutions <- FALSE
#solutions <- TRUE

# default function to display dataframes nicely
# options -> vector of column names (gets processed by kable(), so can be latex), number of rows to display, and rounding digits
# -> needed because formatting of raw dataframe is bad when output in markdown
# -> nesting functions instead of piping so doesn't require magrittr
display_nice <- function(df, col.names = NA, nrow = 10, digits = 3) {
  
  # set columns names to the given vector or keep names or original df
  if (identical(col.names, NA)) {
    col.names = colnames(df)
  }
  
  # convert to knitr_kable and style
  # -> always want html format, left aligned with not full width
  # -> table.attr -> have to tell quarto to not process the table (https://github.com/quarto-dev/quarto-cli/issues/5737)
  kable_styling(kable(head(df, n = nrow),
                      col.names = col.names,
                      format = "html",
                      digits = digits,
                      table.attr = 'data-quarto-disable-processing="true"'),
                bootstrap_options = "striped",
                full_width = FALSE,
                position = "left")
}

```

```{r}
#| label: raw-data
#| echo: false

# load data
data_raw <- read_csv(file = "data/data-grades.csv")
data_majors <- read_csv(file = "data/data-majors.csv")

# preview data
display_nice(data_raw, nrow = 5)
display_nice(data_majors, nrow = 5)

```

To read in the data, first download it from Canvas and then change the path in the `read_csv()` statement above to where you have saved the data relative to the location of the your homework file. 

This assignment will take you through steps to clean, organize and analyze these the test scores.

## Assignment

The goal of this assignment is to demonstrate common data manipulation tasks using packages from the **tidyverse**.

### Part a -- Data manipulations

The goal is to have a single dataset with the following columns:

- `ID`
- `Student`: just two initials
- `Major`
- `Class`: 1 or 2
- `Test_1`: % out of 100
- `Test_2`: % out of 100

1. For the grades data, we need to split the current student column into two variables, one of their initials and one for the class they are in. Use `tidyr::separate_wider_delim()` to do so.

```{r include = solutions}
#| label: separate-data

# use separate_wider_delim() to separate Student into initials and class
data_grades <- data_raw %>% 
  separate_wider_delim(cols = Student, delim = "-", names = c("Student", "Class"))

```

2. Convert the test scores to percentages (Test 1 is out of 30 points and Test 2 is out of 70 points).

```{r include = solutions}
#| label: convert-test-scores

# use mutate() to convert test grades to %
# -> Test 1 = points out of 30
# -> Test 2 = points out of 70
data_grades %<>% 
  mutate(Test_1 = round(Test_1 / 30 * 100, 1),
         Test_2 = round(Test_2 / 70 * 100, 1))

```

3. Combine grades data and majors data and then sort alphabetically by student initials within each class.

```{r include = solutions}
#| label: combine-data

# combine grades data and majors data
# use arrange() to sort
data_grades %<>% 
  left_join(y = data_majors,
            by = "ID") %>% 
  arrange(Class, Student)

```

### Part b -- Visualize data

Now that the data is cleaned and organized, lets visualize the Test 1 scores to start with. 

Create two polished plots to visualize Test 1 scores, at least one of which should include a class comparison or major comparison.

```{r include = solutions}
#| label: test-1-plots

# use ggplot() and geom_boxplot() to create boxplots overall test grades
ggplot(aes(x = Test_1),
       data = data_grades) + 
  geom_boxplot() + 
  labs(x = "Test 1 %") + 
  theme_bw() + 
  theme(axis.ticks.y = element_blank(),
        axis.text.y = element_blank())

# by class
ggplot(aes(x = Test_1,
           y = Class),
       data = data_grades) + 
  geom_boxplot(fill = "lightblue") + 
  labs(x = "Test 1 Grades") + 
  theme_bw()

# by major
ggplot(aes(x = Test_1,
           y = Major),
       data = data_grades) + 
  geom_boxplot(fill = "lightgreen") + 
  labs(x = "Test 1 Grades") + 
  theme_bw()

```

### Part c -- Summarize data

Now that we have an idea of the distributions for Test 1, let's summarize them, specifically we want to create an overall summary and a summary by class.

1. Create a test 1 dataset that contains only the Class, Student initials and Test 1 score.

```{r include = solutions}
#| label: test-1

# create test 1 dataset
data_test1 <- data_grades %>% 
  select(Student, Class, Test_1)

```

2. Create an object named `data_summary_overall` that summarizes Test 1 scores with the sample size, average and standard deviation. Then pipe the following lines of code to the end of your summary function call to add an indicator column and rearrange the columns.

```{r echo = !solutions}
#| label: summary-indicator-code
#| eval: false
#| error: true

data_summary_overall <- < summary function call > %>% 
  mutate(Class = "Overall") %>% 
  select(4, 1:3)

```

```{r include = solutions}
#| label: summary-overall-test-1

# use summarize() to aggregate data
data_summary_overall <- data_test1 %>% 
  summarize(n = n(),
            avg = round(mean(Test_1), 1),
            sd = round(sd(Test_1), 1)) %>% 
  mutate(Class = "Overall") %>% 
  select(4, 1:3)

```

```{r}
#| label: preview-summary-overall-test-1
#| echo: false

# preview data
display_nice(data_summary_overall)

```

3. Create another object called `data_summary_section` that performs the same summary functions the previous step, except by Class.

```{r include = solutions}
#| label: summary-class-test-1

# add .by = argument to aggregate data within class
data_summary_class <- data_test1 %>% 
  summarize(.by = Class,
            n = n(),
            avg = round(mean(Test_1), 1),
            sd = round(sd(Test_1), 1))

```

```{r}
#| label: preview-summary-class-test-1
#| echo: false

# preview data
display_nice(data_summary_class)

```

4. Combine the overall summary with the class summary rowwise.

```{r echo = solutions}
#| label: summary-test-1

# combine overall summary with class summary
# -> use bind_rows() to combine two dataframes by row (longer)
data_summary <- bind_rows(data_summary_overall,
                          data_summary_class)

```

### Part d -- More manipulations and visualizations 1

If we want to visualize both tests and class at the same time, some more data restructuring is necessary. Specifically, we need the data to have the following columns:

- `ID`
- `Student`: just two initials
- `Major`
- `Class`: 1 or 2
- `Test`: 1 or 2
- `Grade`: % out of 100

Thus, there is two rows per student, one for each test grade.

Perform the necessary data steps and then recreate the following visual. Note that to have the labels for Test 1 and Test 2 nicely formatted, the values need to be cleaned in the data.

```{r echo = solutions}
#| label: long-data-visual

# use pivot_longer() to reformat the data from wide to long
data_plot <- data_grades %>% 
  pivot_longer(cols = c(Test_1, Test_2),
               names_to = "Test",
               values_to = "Grade")

# reformat Test column to look cleaner
# use case_when() to match current values to new values
data_plot %<>% 
  mutate(Test = str_replace_all(Test, pattern = "_", replacement = " "))

# create boxplot by class for each test
# -> use facet_wrap()
ggplot(aes(x = Class,
           y = Grade),
       data = data_plot) + 
  geom_boxplot(fill = "lightyellow") + 
  facet_wrap(Test ~ .) + 
  theme_bw()

```

### Part e -- More manipulations and visualizations 2

Now the professor wants to investigate applying a curve by major for Test 1 grades.

1. Using the Test 1 data from Part c, create a new dataset that also contains curved grades for Test 1 according to the following scheme:

- Class 1 receives 3 additional percentage points (e.g. a 70% becomes a 73%).

- Class 2 receives a 30% of their missed points back (e.g. a 70% becomes a 79%; *HINT: On paper work out an algebra function that accomplishes this and spot check a few values to make sure they are correct*).

*HINT: Use `case_when()`.*

```{r include = solutions}
#| label: curved-data

# use case_when() to create a different curve based on class
data_test1_curved <- data_test1 %>% 
  mutate(Test_1_curved = case_when(
    Class == "1" ~ Test_1 + 3,
    Class == "2" ~ 30 + 0.7 * Test_1
  ))

```

2. Using the curved data, perform the necessary data steps and then recreate the following visual, which compares the original and curved grades for each class.

```{r echo = solutions}
#| label: curved-data-visual

# use pivot_longer() to reformat the data from wide to long
# edit test grade type strings to be nicer formatted
# create histograms by class and by type of grade
data_test1_curved %>% 
  pivot_longer(cols = c(Test_1, Test_1_curved),
               names_to = "grade_type",
               values_to = "grade") %>% 
  mutate(grade_type = case_when(
    grade_type == "Test_1" ~ "Original",
    grade_type == "Test_1_curved" ~ "Curved",
  )) %>% 
  ggplot() + 
  geom_histogram(aes(x = grade),
                 bins = 10,
                 color = "black", fill = "grey") + 
  facet_grid(grade_type ~ Class) + 
  theme_bw()

```