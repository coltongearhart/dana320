---
title: "3.5 HW -- Interactive Plots"
format:
  html:
    output-file: "3.5 HW - Interactive Plots.html"
    #output-file: "3.5 HW - Interactive Plots SOLUTION.html"
    embed-resources: true
    toc: true
    toc-location: left
    df-print: kable
execute: 
  warning: false
  message: false
bibliography: references.bib
---

Submission: Completed qmd file and rendered html file via Canvas.

## Overview

These problems apply the idea from the notes '3.5 -- Interactive Plots', where we learned how to create interactive plots in R using **plotly**.

This assignment will visualize some important aspects of NFL players, including physical attributes, positional information / attributes and salary. We will be using a dataset of Madden 23 player info. A subset of the `madden-23.csv` data is shown below:

```{r}
#| label: setup
#| echo: false

# load packages
library(tidyverse)
library(plotly)
library(crosstalk)
library(DT)

# set parameter for solutions
solutions <- FALSE
#solutions <- TRUE

```

```{r}
#| label: data
#| echo: false

# preview data
data_madden <- read_csv(file = "data/madden-23.csv")
head(data_madden)

```

## Assignment

The goal is to recreate some interactive plots with minimal guideance and some plots of your creation in order to understand the structure of **plotly** function calls. It is designed to be open ended so you can explore a variety of different plot types and interactive plot techniques.

### Part a -- Scatterplot

Start with a scatterplot visualizing the relationship between `overall_rating` and `totalSalary`. Modify your plot to create a final visualization that considers the following:

- Must be interactive.
- Must take into account overplotting, either by changing the plot type or utilizing additional aesthetics.
- Depending on your implementation of above, can you add additional mouse-over text to add to the plot?

```{r include = solutions}
#| label: scatterplot

# option 1: alpha blending with plotky
data_madden %>% 
  plot_ly(x = ~overall_rating,
          y = ~totalSalary,
          text = ~`Full Name`) %>% 
  add_markers(alpha = 0.3)

# option 2: hexmap with ggplotly
p <- ggplot(data = data_madden,
            aes(x = overall_rating,
                y = totalSalary)) + 
  geom_hex() + 
  theme_bw()
ggplotly(p)

```

OPTIONAL CHALLENGE:

- Use `slice_max()` to look at the top 500 players according to `overall_rating` and recreate the following scatterplot / data table setup that can be used during EDA to identify outlying data points.

    - Try lasso-selecting a few points and seeing the results in the table!

```{r echo = solutions}
#| label: linked-brushing

# craete shared data of top players
# -> NOTE datatable needs reasonably small data
shared_data <- data_madden %>% 
  slice_max(order_by = overall_rating,
            n = 500) %>% 
  highlight_key()

# create plot from shared data
p <- shared_data %>% 
  plot_ly(x = ~overall_rating,
          y = ~totalSalary) %>% 
  add_markers(alpha = 0.3) %>%
  highlight(on = "plotly_selected")

# arrange plot and datatable
bscols(p, datatable(shared_data, height = 500))

```

### Part b -- Dumbell chart

Recreate the following dumbell chart to the best of your ability. Features of this plot:

- Data needs to be pre-summarized to get the average `totalSalary` and `signingBonus` by `Position`. Calculate the number of players included in each average calculation as well.
- Sorted by increasing average `totalSalary`. *HINT: This requires a `mutate()` statement, not an `arrange()` statement.*
- For each position, the dark green plots the average `totalSalary` and light green adds the average `signingBonus`. Thus we can interpret the ending value as the average total money earned during the first year of the contract.
- Well formatted mouse-over interactivity features. *HINT: Use html formatting and `scales::comma()`.*

Try to get your plot as close as you can to this plot (with a reasonable amount of effort :)

```{r echo = solutions}
#| label: dumbell-chart

data_madden %>% 
  summarize(.by = Position,
            across(c(totalSalary, signingBonus), mean),
            n = n()) %>% 
  mutate(Position = fct_reorder(Position, totalSalary)) %>% 
  plot_ly() %>% 
  add_segments(x = ~totalSalary,
               xend = ~totalSalary + signingBonus,
               y = ~Position,
               yend = ~Position,
               color = I("grey")) %>% 
  add_markers(x = ~totalSalary,
              y = ~Position,
              text = ~paste0("Avg salary: $", scales::comma(round(totalSalary, 0)), "<br>Avg signing bonus: $", scales::comma(round(signingBonus, 0)), "<br>Sample size: ", n, " players"),
              color = I("darkgreen")) %>%
  add_markers(x = ~totalSalary + signingBonus,
              y = ~Position,
              text = ~paste0("Total money contract year 1: $", scales::comma(round(totalSalary + signingBonus, 0))),
              color = I("green")) %>% 
  layout(title = "Average contract and signing bonus by position",
         xaxis = list(title = "Money ($)")) %>% 
  hide_legend()

```

### Part c -- Visualize data

Create a mimimum of one additional *interactive plot* using `plot_ly()` (not `ggplotly()`). It can be as simple or complex as you would like. Create additional plots and find a narrative if you wish! Include a short write-up explaining your visual.

```{r include = solutions}
#| label: additional-plot

# option 1: alpha blending with plotky
data_madden %>% 
  plot_ly(x = ~jerseyNum,
          y = ~speed_rating,
          size = ~weight,
          text = ~Position) %>% 
  add_markers(alpha = 0.3)

# write-up: there seems to be a relationship between jersey number and the physical attributes of a player and their position, plotted in this case is speed and weight

```